function [dataDir, measConfig, dataBg, dataTarget, freqsVec, stdBg, stdTarget] = loadData(expIdx, params)
% loadData - loads experimental data using specified params
% 
% Arguments:
%   expIdx      - experiment to load
%   params      - parameters for load (see arguments section)
%
% Output
%   figTitle    - name of the loaded experiment
%   dataBg      - background phantom data (no inclusions)
%   dataTarget  - target phantom data (with inclusions)
%   freqsVec    - frequencies after FT in MHz
%   stdBg       - std of dataBg in case data was averaged in freq. domain
%   stdTarget   - std of dataTarget in case data was averages in FD

arguments
    expIdx int32;
    % number of frequencies to use after FFT and the array of frequencies
    params.nFreqs int32 = 1;
    %  number of time points to take where the signal is
    params.timePointsWindow double = 350;
    % number of points to shift the time point window so that there is few
    % points of background before signal starts, needed due to the way the
    % signal start is searched.
    % first is for laser, second is for one that passes through phantom
    params.timePointsBias double = [-5 -50];
    % number of time points before signal comes to get the background value of
    % a signal
    % Cutoff the intensity background signal to detect the start of it
    params.cutoffStd double = 8; % 8 times the std of background
    params.timePointsBg double = 1500;
    % approximate time delay where signal starts, usually in the range of 
    % 2.51 ns to 35 ns.
    params.timeDelay double = [6.65e-8 1.13e-7]; % s
    % algorithm to be used for detection: (1) FixedDelayTrigger - selects the 
    % start of the laser and target signals based on the fixed delay in 
    % nanoseconds from the electric trigger send by laser driver to oscilloscope
    % (2) FixedDelayLaser - specifies the fixed delay in nanosecond from the
    % laser pulse to the target pulse; laser pulse is selected by cutoff std
    params.pulseSelectAlgorithm PulseSelectAlgorithm = PulseSelectAlgorithm.FixedDelayLaser;
    % number of waveforms (laser pulses) per source-detector pair
    params.nWaveforms int32 = 200;
    % normalizing the data according to measured coupling coefficients
    params.normalization = '../data/CouplingCoefsExp/DetectorCPLTeflonEpoxy.mat';
    % if load in time or frequency domains
    params.timeDomain = 1;
    % if true, loads the processed targetDir, measConfig, dataBg, 
    % dataTarget, freqsVec, stdBg, stdTarget data from mat file if it
    % exists for the currently selected expIdx
    params.loadProcessedData = 0;
    % dir for the processed data
    params.processedDataDir = '../data/';
end

figTitles = ["BPSi 780nm 20,30 ug/ml" "ICG 780nm 2,3 ug/ml" "HyNPs 780nm 2,3 ug/ml" ...
    "BPSi 808nm 20,30 ug/ml" "ICG 808nm 2,3 ug/ml" "HyNPs 808nm 2,3 ug/ml" ...
    "HyNPs 780nm 4,6 ug/ml" "HyNPs 808nm 4,6 ug/ml" ...
    "ICG 780nm 1,1.5 ug/ml" "ICG 808nm 1,1.5 ug/ml" ...
    "J-agg 890nm 2,3 ug/ml" "Standard 10det 800nm BG tubes" "Standard 10det 800nm AbsX2 ScaX2" ...
    "Standard 8det 808nm tubes" "Standard 8det 808nm AbsX5 ScaX5" "Standard 10det 808nm AbsX5 ScaX5" ...
    "Standard 8det 808nm tubes" "Standard 8det 808nm AbsX5 ScaX5 flat BG" "Standard 8det 808nm AbsX2 ScaX2 flat BG" ...
    "Standard 8det 808nm AbsX5 ScaX5 tubes BG" "Standard 8det 808nm AbsX2 ScaX2 tubes BG" ...
    "Standard 10det 808nm tubes" "Standard 10det 808nm AbsX2 ScaX2 flat BG" "Standard 10det 808nm AbsX2 ScaX2 tubes BG" ...
    "PP tubes 8det 808nm" "PTFE tubes 8det 808nm" "Standard AbsX2 ScaX2 808nm 8det 18.06.25" ...
    "Standard AbsX3 ScaX3 808nm 8det 18.06.25" "Standard AbsX4 ScaX4 808nm 8det 18.06.25" ...
    "Standard AbsX0.5 ScaX0.5 8det 808nm 23.06.25" "Standard AbsX0.75 ScaX0.75 8det 808nm 23.06.25" ...
    "Standard tubes 8det 808nm 23.06.25" "Standard AbsX1.5 ScaX1.5 8det 808nm 23.06.25" ...
    "Standard AbsX2 ScaX2 8det 808nm 23.06.25" "Standard AbsX2 ScaX0.5 8det 808nm 23.06.25" "Standard AbsX0.5 ScaX2 8det 808nm 23.06.25" ...
    ];
targetDirs = ["Exp20241008" "Exp20241008" "Exp20241008" ...
    "Exp20241009" "Exp20241009" "Exp20241009" ...
    "Exp20241015" "Exp20241015" ...
    "Exp20241018" "Exp20241018" ...
    "Exp20241203" "Exp20250306" "Exp20250306" ...
    "Exp20250310" "Exp20250310" "Exp20250310" ...
    "Exp20250318" "Exp20250318" "Exp20250318" ...
    "Exp20250318" "Exp20250318" ...
    "Exp20250319" "Exp20250319" "Exp20250319" ...
    "Exp20250618" "Exp20250618" "Exp20250619" "Exp20250619" "Exp20250619" ...
    "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623"];
targetDirs = "../data/" + targetDirs + "/";
bgDirs = ["Exp20241008" "Exp20241008" "Exp20241008" ...
    "Exp20241009" "Exp20241009" "Exp20241009" ...
    "Exp20241015" "Exp20241015" ...
    "Exp20241018" "Exp20241018" ...
    "Exp20241203" "Exp20250306" "Exp20250306" ...
    "Exp20250310" "Exp20250310" "Exp20250310" ...
    "Exp20250318" "Exp20250318" "Exp20250318" ...
    "Exp20250318" "Exp20250318" ...
    "Exp20250319" "Exp20250319" "Exp20250319" ...
    "Exp20250618" "Exp20250618" "Exp20250619" "Exp20250619" "Exp20250619" ...
    "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623" "Exp20250623"];
bgDirs = "../data/" + bgDirs + "/";
csvMeasConfigs = "DOT_" + ["measpoints20241008" "measpoints20241008" ...
    "measpoints20241008" "measpoints20241009" "measpoints20241009" ...
    "measpoints20241009" "measpoints20241015" "measpoints20241015" ... 
    "measpoints20241018" "measpoints20241018" "measpoints20241203" ...
    "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" "MeasPointsAttenuator" ...
    "MeasPoints" "MeasPoints" "MeasPoints" ...
    "MeasPoints" "MeasPoints" ...
    "MeasPointsAttenuator" "MeasPointsAttenuator" "MeasPointsAttenuator" ...
    "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" ...
    "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints" "MeasPoints"];
bgNames = ["BG" "BG" "BG" ...
    "BG" "BG" "BG" ...
    "BG_780nm" "BG_808nm" ...
    "BG_780nm" "BG_808nm" ...
    "BG_890nm" "BG_800nm" "BG_800nm" ...
    "BG_8det_808nm" "BG_8det_808nm" "BG_10det_808nm" ...
    "BG_8det_808nm" "BG_8det_808nm" "BG_8det_808nm" ...
    "TUBES_8det_808nm" "TUBES_8det_808nm" ...
    "BG_10det_808nm" "BG_10det_808nm" "TUBES_10det_808nm" ...
    "BG" "BG" "BG" "BG" "BG" ...
    "BG" "BG" "BG" "BG" "BG" "BG" "BG"];
targetNames = ["BPSi_780nm" "ICG_780nm" "HY_780nm" ...
    "BPSi_808nm" "ICG_808nm" "HY_808nm" ...
    "HY_780nm" "HY_808nm" ...
    "ICG_780nm" "ICG_808nm" ...
    "JA_890nm" "TUBES_800nm" "ABSSCA_800nm" ...
    "TUBES_8det_808nm" "ABSSCA_8det_808nm" "ABSSCA_10det_808nm" ...
    "TUBES_8det_808nm" "ABSSCAx5_8det_808nm" "ABSSCAx2_8det_808nm" ...
    "ABSSCAx5_8det_808nm" "ABSSCAx2_8det_808nm" ...
    "TUBES_10det_808nm" "ABSSCAx2_10det_808nm" "ABSSCAx2_10det_808nm" ...
    "PP_TUBES" "PTFE_TUBES" "ABSSCA_X2" "ABSSCA_X3" "ABSSCA_X4" ...
    "ABSSCA_X05" "ABSSCA_X075" "TUBES" "ABSSCA_X15" "ABSSCA_X2" "ABS_X2_SCA_X05", "ABS_X05_SCA_X2"];
% choose the experiment from above to load by specifying correct index
% expIdx = 2;
figTitle = char(figTitles(expIdx));
figName = strrep(strrep(strrep(figTitle, '/', '-'), ',', '_'), ' ', '_');
figName = char(figName);
targetDir = [what(targetDirs(expIdx)).path '/'];
bgDir = [what(bgDirs(expIdx)).path '/'];
bgName = char(bgNames(expIdx));
targetName = char(targetNames(expIdx));
csvFile = char(csvMeasConfigs(expIdx));
processedDataPath = [params.processedDataDir figName '_nFreqs_' num2str(params.nFreqs) '.mat'];
dataDir = params.processedDataDir;

% Loading and processing the data
disp(['Loading data for ' figTitle]);

% check if the mat file with processed data exist and load it
if params.loadProcessedData
    if exist(processedDataPath, "file")
        load(processedDataPath, 'dataBg', 'dataTarget', 'stdBg', 'stdTarget', 'measConfig', 'freqsVec', 'dataDir');
        return;
    end
end

% load CSV file with source-detector measurement configuration
% in CSV file, each row (and its index) represent one source and in each
% row indices of active detectors are indicated
measConfig = readmatrix([targetDir csvFile]);

% normalizing the data according to measured coupling coefficients
normalization = loadVarFromMatFile(params.normalization);
% there are 3 measurements for each detector
normalization = mean(normalization, 2);
% normalization = ones(length(normalization), 1); % no normalization
normalization = normalization ./ max(normalization);

if params.timeDomain
    [dataBg, ~] = loadWFmatTDmean(bgDir, bgName, measConfig, params.nFreqs, ...
        params.cutoffStd, params.timePointsWindow, params.timePointsBias, ...
        params.timePointsBg, params.timeDelay, params.pulseSelectAlgorithm, ...
        params.nWaveforms);
    [dataTarget, freqsVec] = loadWFmatTDmean(targetDir, targetName, measConfig, params.nFreqs, ...
        params.cutoffStd, params.timePointsWindow, params.timePointsBias, ...
        params.timePointsBg, params.timeDelay, params.pulseSelectAlgorithm, ...
        params.nWaveforms); % , normalization);
    freqsVec = freqsVec * 1e-6; % MHz
    stdBg = zeros(size(dataBg)); stdTarget = zeros(size(dataTarget));
else
    [dataBg, stdBg, ~] = loadWFmatFDmean(bgDir, bgName, measConfig, params.nFreqs, ...
        params.cutoffStd, params.timePointsWindow, params.timePointsBias, ...
        params.timePointsBg, params.timeDelay, params.pulseSelectAlgorithm, ...
        params.nWaveforms);
    [dataTarget, stdTarget, freqsVec] = loadWFmatFDmean(targetDir, targetName, measConfig, params.nFreqs, ...
        params.cutoffStd, params.timePointsWindow, params.timePointsBias, ...
        params.timePointsBg, params.timeDelay, params.pulseSelectAlgorithm, ...
        params.nWaveforms); % , normalization);
    freqsVec = freqsVec * 1e-6; % MHz
end

save(processedDataPath, 'dataBg', 'dataTarget', 'stdBg', 'stdTarget', 'measConfig', 'freqsVec', 'dataDir');

disp('Done loading data.');


end

